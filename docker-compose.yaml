include:
  - ./services/apiservice/docker-compose.yaml
  - ./services/contacts-worker/docker-compose.yaml
  - ./services/notification-service/docker-compose.yaml
  - ./services/rebalancer-service/docker-compose.yaml
  - ./services/sender-service/docker-compose.yaml
  - ./frontend/docker-compose.yaml

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.2
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: "${ZOOKEEPER_CLIENT_PORT}"
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.9.2
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_ADVERTISED_PORT}:${KAFKA_ADVERTISED_PORT}"
    environment:
      KAFKA_BROKER_ID: "${KAFKA_BROKER_ID}"
      KAFKA_ZOOKEEPER_CONNECT: "${KAFKA_ZOOKEEPER_CONNECT}"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:7.9.2
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      '
      until kafka-topics --bootstrap-server kafka:${KAFKA_ADVERTISED_PORT} --list; do
        echo "Waiting for Kafka…"
        sleep 1
      done

      echo "Creating kafka topics"
      for T in $$(echo $KAFKA_TOPICS | tr "," " "); do
        kafka-topics \
          --bootstrap-server kafka:${KAFKA_ADVERTISED_PORT} \
          --create \
          --if-not-exists \
          --topic "$$T" \
          --replication-factor 1 \
          --partitions 10
      done
      
      echo -e "Successfully created the following topics:"
      kafka-topics --bootstrap-server kafka:${KAFKA_ADVERTISED_PORT} --list
      '

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_UI_PORT}:${MINIO_UI_PORT}"
    environment:
      MINIO_ROOT_USER: "${MINIO_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_PASSWORD}"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":${MINIO_UI_PORT}"

  init-minio:
    image: minio/minio:latest
    depends_on:
      - minio
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      '
      until mc alias set myminio http://minio:${MINIO_PORT} \
      "${MINIO_USER}" "${MINIO_PASSWORD}"; do
        echo "Waiting for MinIO…"
        sleep 1
      done
      
      for B in $$(echo $S3_BUCKETS | tr "," " "); do 
        mc mb --ignore-existing myminio/$$B
      done
      '

  postgres:
    image: postgres:17.5
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init-sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./config/alloy:/etc/alloy
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - run
      - /etc/alloy/config.alloy
      - --storage.path=/var/lib/alloy/data
      - --server.http.listen-addr=0.0.0.0:12345
    ports:
      - '12345:12345'

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana

volumes:
  minio_data:
  pgdata:
  grafanadata:
  prometheusdata:
